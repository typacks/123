import os, re, configparser, requests, time
import urllib
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import BoundFilter
import urllib.request
from tiktok_downloader import snaptik
import db
import keyboards as kb

config = configparser.ConfigParser()
config.read("settings.ini")
TOKEN = config["tgbot"]["token"]
admin_id = int(config["tgbot"]["admin_id"])

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class Info(StatesGroup):
    adminka = State()
    rassilka = State()

if not os.path.exists('videos'):
	os.makedirs('videos')
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
	if db.get_users_exist(message.chat.id) == False:
		db.add_user_to_db(message.chat.id)
		if message.chat.id == admin_id:
			await bot.send_message(chat_id=message.chat.id, text='üìº –ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å TikTok. \n/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ', reply_markup = kb.admin_start())
		else:
			await bot.send_message(chat_id=message.chat.id, text='üìº –ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å TikTok. \n/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ', reply_markup=types.ReplyKeyboardRemove())
	else:
		if message.chat.id == admin_id:
			await bot.send_message(chat_id=message.chat.id, text='üìº –ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å TikTok. \n/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ', reply_markup = kb.admin_start())
		else:
			await bot.send_message(chat_id=message.chat.id, text='üìº –ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å TikTok. \n/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ', reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
	await bot.send_message(chat_id=message.chat.id, text='–°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ TikTok –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—ë –º–Ω–µ:')

@dp.message_handler(text="–ê–¥–º–∏–Ω–∫–∞")
async def create_post(message: types.Message):
	if db.get_users_exist(message.chat.id) == True:
		if message.chat.id == admin_id:
			await bot.send_message(chat_id=message.chat.id, text='–í–æ—Ç –≤–∞—à–µ –∞–¥–º–∏–Ω –º–µ–Ω—é.', reply_markup = kb.admin_menu())
			await Info.adminka.set()

@dp.message_handler(state=Info.adminka, content_types=types.ContentTypes.TEXT)
async def adminka(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await bot.send_message(chat_id=message.chat.id, text='–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=kb.admin_start())
        await state.finish()
    elif message.text.lower() == '—Ä–∞—Å—Å—ã–ª–∫–∞':
        await bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.', reply_markup=kb.back_2())
        await state.finish()
        await Info.rassilka.set()
    elif message.text.lower() == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        all_users = db.get_all_users()
        await bot.send_message(chat_id=message.chat.id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {len(all_users)}', reply_markup = kb.admin_menu())

@dp.message_handler(state=Info.rassilka, content_types=types.ContentTypes.TEXT)
async def rassilka2(message: types.Message, state: FSMContext):
	if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
		await bot.send_message(chat_id=message.chat.id, text='–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é.', reply_markup=kb.admin_menu())
		await state.finish()
	else:
		text = message.text
		start_time = time.time()
		users = db.get_all_users()
		for user in users:
			try:
				await bot.send_message(chat_id=user[0], text=text)
				time.sleep(0.1)
			except:
				pass
		end_time = time.time()
		await bot.send_message(message.from_user.id, f"‚úîÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {round(end_time-start_time, 1)} —Å–µ–∫. \n „Äã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. „Ää", reply_markup=kb.admin_menu())
		await state.finish()

@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    if message.text.startswith('https://www.tiktok.com'):
        await bot.send_message(chat_id=message.chat.id, text='–û–∂–∏–¥–∞–π—Ç–µ...')
        video_url = message.text
        try:
            await bot.send_message(chat_id=message.chat.id, text='–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...')
            snaptik(video_url).get_media()[0].download(f"./videos/result_{message.from_user.id}.mp4")
            path = f'./videos/result_{message.from_user.id}.mp4'
            with open(f'./videos/result_{message.from_user.id}.mp4', 'rb') as file:
                await bot.send_video(
                    chat_id=message.chat.id,
                    video=file,
                    caption='–í–æ—Ç —Ç–≤–æ–µ –≤–∏–¥–µ–æ:'
                    )
            os.remove(path)
            await bot.send_message(chat_id=message.chat.id, text='–°–∫–∞—á–∏–≤–∞—é –º—É–∑—ã–∫—É –∏–∑ –≤–∏–¥–µ–æ...')
            snaptik(video_url).get_media()[0].download(f"./videos/result_{message.from_user.id}.mp3")
            path_music = f'./videos/result_{message.from_user.id}.mp3'
            with open(f'./videos/result_{message.from_user.id}.mp3', 'rb') as file:
                await bot.send_audio(
                    chat_id=message.chat.id,
                    audio=file,
                    caption='–í–æ—Ç –º—É–∑—ã–∫–∞ –≤–∏–¥–µ–æ:'
                    )
            os.remove(path_music)
        except Exception as ex:
            print(ex)
            await bot.send_message(chat_id=message.chat.id, text='–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏, –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, –≤–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —è –µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª.')
    elif message.text.startswith('https://vm.tiktok.com') or message.text.startswith('http://vm.tiktok.com'):
        await bot.send_message(chat_id=message.chat.id, text='–û–∂–∏–¥–∞–π—Ç–µ...')
        video_url = message.text
        try:
            await bot.send_message(chat_id=message.chat.id, text='–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...')
            snaptik(video_url).get_media()[0].download(f"./videos/result_{message.from_user.id}.mp4")
            path = f'./videos/result_{message.from_user.id}.mp4'
            with open(f'./videos/result_{message.from_user.id}.mp4', 'rb') as file:
                await bot.send_video(
                    chat_id=message.chat.id,
                    video=file,
                    caption='–í–æ—Ç —Ç–≤–æ–µ –≤–∏–¥–µ–æ:'
                    )
            os.remove(path)
            await bot.send_message(chat_id=message.chat.id, text='–°–∫–∞—á–∏–≤–∞—é –º—É–∑—ã–∫—É –∏–∑ –≤–∏–¥–µ–æ...')
            snaptik(video_url).get_media()[0].download(f"./videos/result_{message.from_user.id}.mp3")
            path_music = f'./videos/result_{message.from_user.id}.mp3'
            with open(f'./videos/result_{message.from_user.id}.mp3', 'rb') as file:
                await bot.send_audio(
                    chat_id=message.chat.id,
                    audio=file,
                    caption='–í–æ—Ç –º—É–∑—ã–∫–∞ –≤–∏–¥–µ–æ:'
                    )
            os.remove(path_music)
        except:
            await bot.send_message(chat_id=message.chat.id, text='–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏, –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, –≤–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —è –µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª.')
    else:
        await bot.send_message(chat_id=message.chat.id, text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ TikTok.')
if __name__ == "__main__":
	db.check_db()
	# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	executor.start_polling(dp, skip_updates=True)
